#include "mywidget.h"
#include "ui_mywidget.h"
#include <QFileDialog>
#include <QDebug>
#include <QTreeView>
#include <QFileSystemModel>
#include <filesystem>
#include <string>
#include <QFileInfo>
#include <QFileSystemModel>
#include <QMessageBox>
#include <QDateTime>
#include <QDirIterator>
#include <QStandardItem>
#include <QFileIconProvider>
#include <QJsonParseError>
#include <QJsonDocument>
#include <QJsonArray>
#include <QStandardItem>
#include <QJsonObject>


MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::MyWidget)
{
    ui->setupUi(this);
}

MyWidget::~MyWidget()
{
    delete ui;
}

QStandardItem* MyWidget::findChilItem(QStandardItem* it, const QString & text){
    if(!it->hasChildren())
        return nullptr;
    for(int i=0; i< it->rowCount(); i++){
        if(it->child(i)->text() == text)
            return it->child(i);
    }
    return nullptr;
}

int MyWidget::strindexP(char s[], char t[]){
    int i, j, k;
    for(i = 0; s[i] != '\0'; i++){
        for(j=i, k=0; t[k] != '\0' && s[j] == t[k]; j++,k++)
            ;
        if(k > 0 && t[k] == '\0')
            return i;
    }
    return -1;
}

void MyWidget::appendToModel(QStandardItemModel *model, const QStringList & list, const QString & LastModifiedTime){
    parentItem = model->invisibleRootItem();


    for(QStringList::const_iterator it = list.begin(); it != list.end(); ++it)
    {
        item = findChilItem(parentItem, *it);
        if(item){
            parentItem = item;
            continue;
        }
        item = new QStandardItem(*it);
        item->setEditable(false);
        if(std::next(it) == list.end()){
            item->setIcon(provider.icon(QFileIconProvider::File));
            parentItem->appendRow({item, new QStandardItem(LastModifiedTime)});
        }
        else{
            item->setIcon(provider.icon(QFileIconProvider::Folder));
            parentItem->appendRow(item);
        }
        parentItem = item;
    }

}


void MyWidget::BackupDirAndFileState(QString WantOperaDirToQstring)
{
    QDateTime date = QDateTime::currentDateTime();
    QString formattedTime = date.toString("yyyy.MM.dd hh:mm:ss");
    //QByteArray formattedTimeMsg = formattedTime.toLocal8Bit();

    qDebug() << "Date is:"+formattedTime;

    LastRecordTimeToString = formattedTime;

    QDir BackupFileStateDir = BackupFileStateDir.currentPath();
    QString  BackupFileStateDirToQstring= BackupFileStateDir.path() + "/";
    qDebug() << "APPCurrentPath is:" << BackupFileStateDir;
    qDebug() << "APPCurrentPathToString is:" << BackupFileStateDirToQstring;

    QFile file(BackupFileStateDirToQstring + "rememberFileState.txt");
    QFileInfo check_file(file);

    //QFileInfo info(file);
    QDateTime lastModified = check_file.lastModified();
    //lastModified = QDateTime::fromString("2010-10-25 10:28:58", "yyyy-MM-dd HH:mm:ss");
    lastModified.setTimeSpec(Qt::UTC);
    QDateTime lastModifiedLocalTime = lastModified.toLocalTime();

    // check if file exists and if yes: Is it really a file and no directory?
    if (check_file.exists() && check_file.isFile()) {
        file.remove();
    } else {
        ;
    }

    //QFile file(APPCurrentPathToString + "rememberFileState.txt");
    file.open(QIODevice::ReadWrite); // Or QIODevice::ReadWrite or QIODevice::WriteOnly


    QTextStream out(&file);
    out << "This file is generated by Qt, please don't modify\n";
    out << "backup file path:" << WantOperaDirToQstring + "\n";
    out << "Last time backup file state time:" << formattedTime + '\n';

    // optional, as QFile destructor will already do it:



    QDirIterator it(WantOperaDirToQstring, QDirIterator::Subdirectories);
    WantSkipOperaDirToQstring = "C:/my-win10-document/software---install";
    while (it.hasNext()) {
        QString dir = it.next();
        if(!dir.contains(WantSkipOperaDirToQstring, Qt::CaseSensitive)
            && !dir.endsWith("/.", Qt::CaseSensitive) && !dir.endsWith("/..", Qt::CaseSensitive)){

            QString lastModifiedLocaleTime = QLocale("en_EN").toString(lastModified, "yyyy MMMM dd HH:mm:ss");

            //out << "\"name\":"<<dir << ";" << "\"LastModifiedTime\":" << lastModified.toString() << "\n";
            out << "{" << "\"name\": "<< "\"" << dir << "\"" << ";" << "\"LastModifiedTime\": " << "\"" << lastModifiedLocaleTime << "\"" << "}," << "\n";
            //qDebug() << "\"name\":"<<dir;
        }
    }

    file.close();
    QMessageBox msgBox;
    msgBox.setText("backup file state have done!");
    msgBox.exec();


    /*
        const std::string json = R"([
                             {"name": "/folder1/file1.txt";"size": "1KB"},
                             {"name": "/folder1/file2.txt";"size": "1KB"},
                             {"name": "/folder1/sub/file3.txt";"size": "1KB"},
                             {"name": "/folder2/file4.txt";"size": "1KB"},
                             {"name": "/folder2/file5.txt";"size": "1KB"}
                             ])";
         */

    // /etc/.
    // /etc/..
    // /etc/X11
    // /etc/X11/fs
    // ...



}

//choose directory
void MyWidget::on_pushButton_clicked()
{
    QDir directory = QFileDialog::getExistingDirectory(this, tr("select directory"));

    qDebug() << "directory's Path is " << directory.absolutePath();
    qDebug() << "directory is " << directory;

    if(!directory.path().contains("/")){
        return;
    }else{
        reply = QMessageBox::question(this, "IMPORTANT NOTICE 1", "You choose directory is: " + directory.absolutePath(),
                                      QMessageBox::Save | QMessageBox::Cancel);

        if (reply == QMessageBox::Save) {
            WantOperaDir = directory.absolutePath() + "/";
            WantOperaDirToQstring = WantOperaDir.path() + "/";
            CheckDirChoose = 1;
            qDebug() << "Save was clicked, now you choice directory is: " << WantOperaDirToQstring;

            dirModel2 = new QFileSystemModel(); //Create new model
            dirModel2->setRootPath(WantOperaDirToQstring); //Set model path

            ui->treeView_2->setModel(dirModel2); //Add model to QTreeView

            QModelIndex idx2 = dirModel2->index(WantOperaDirToQstring); //Set the root item
            ui->treeView_2->setRootIndex(idx2);
        }
        if(reply == QMessageBox::Cancel)
        {
            CheckDirChoose = 0;
        }

    }



}

// Display status of backup files and now file or directory different
void MyWidget::on_pushButton_2_clicked()
{

    model.setHorizontalHeaderLabels({"Name", "Size"});


//    const std::string json = R"([
//                             {"name": "/folder1/file1.txt";"size": "1KB 1"},
//                             {"name": "/folder1/file2.txt";"size": "2023 July 25 19:53:09"},
//                             {"name": "/folder1/sub/file3.txt";"size": "1KB"},
//                             {"name": "/folder2/file4.txt";"size": "1KB"},
//                             {"name": "/folder2/file5.txt";"size": "1KB"}
//                             ])";


    const std::string json = R"([
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/xthreads.h.FF54C47FB4B7382A.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/xtimec.h.7EBD356A27955504.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/xtr1common.E49B2C47A014CB5A.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/xtree.80AD9DA8439D3086.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/xutility.102A0CD5A197B686.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/yvals.h.0315B3A9C4B27910.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/yvals_core.h.D79E2161B6D038AE.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/__msvc_chrono.hpp.C53D586FCE0358C7.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/__msvc_system_error_abi.hpp.CFB01E470000EDDE.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/__msvc_xlocinfo_types.hpp.1A22C9FFD90532E7.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/.cache/clangd/index/__stddef_max_align_t.h.FEDF5B123A8C95DD.idx";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/.qtc_clangd/compile_commands.json";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/CheckDirectoryAndFileChange.exe";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/CheckDirectoryAndFileChange.ilk";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/CheckDirectoryAndFileChange.pdb";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/CheckDirectoryAndFileChange.vc.pdb";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/main.obj";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/moc_mywidget.cpp";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/moc_mywidget.obj";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/moc_predefs.h";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/debug/mywidget.obj";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/Makefile";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/Makefile.Debug";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/Makefile.Release";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/release";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/rememberFileState.txt";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/textPPP.txt";"LastModifiedTime": "2023 July 25 19:58:07"},
{"name": "C:/my-win10-document/code/CheckDirectoryAndFileChange/build-CheckDirectoryAndFileChange-Desktop_Qt_6_5_1_MSVC2019_64bit-Debug/ui_mywidget.h";"LastModifiedTime": "2023 July 25 19:58:07"}
                  ])";



    QJsonParseError parse;
    // The string is not a valid json, the separator must be a comma
    // and not a semicolon, which is why it is being replaced
    QByteArray data = QByteArray::fromStdString(json).replace(";", ",");
    QJsonDocument const& jdoc =  QJsonDocument::fromJson(data, &parse);
    Q_ASSERT(parse.error == QJsonParseError::NoError);
    if(jdoc.isArray()){
        for(const QJsonValue &element : jdoc.array() ){
            QJsonObject obj = element.toObject();
            QString name = obj["name"].toString();
            QString size = obj["size"].toString();
            appendToModel(&model, name.split("/", Qt::SkipEmptyParts), size);
        }
    }

//    viewLeft = new QTreeView(this);
//    viewLeft->setModel(&model);
//    viewLeft->move(5,200);
//    viewLeft->resize(300,200);
//    viewLeft->show();

    //treeView = new QTreeView(this);
    //treeView.setModel(&model);
    ui->treeView->setModel(&model);

//    treeView->move(5,200);
//    treeView->resize(300,200);
    //treeView.show();


    //QModelIndex idxLeft = dirModel2->index(WantOperaDirToQstring); //Set the root item
    //ui->treeView_2->setRootIndex(idxLeft);

    /*
    dirModel2 = new QFileSystemModel(); //Create new model
    dirModel2->setRootPath(WantOperaDirToQstring); //Set model path

    ui->treeView_2->setModel(dirModel2); //Add model to QTreeView

    QModelIndex idx2 = dirModel2->index(WantOperaDirToQstring); //Set the root item
    ui->treeView_2->setRootIndex(idx2);
    */

}

//status of backup files
void MyWidget::on_pushButton_3_clicked()
{
    if(CheckDirChoose == 1){

        reply = QMessageBox::question(this, "IMPORTANT NOTICE 2", "Now ready to backup status of files that directory is: "
        + WantOperaDirToQstring + "\n\n" + "When backup, program may be appear doesn't response, it's normal, just only wait a moment, " +
        "then you will get tip of backup file state have done.",
                                      QMessageBox::Save | QMessageBox::Cancel);
        if (reply == QMessageBox::Save) {

            //需要实现文件状态的备份
            qDebug() << "Now ready to status of backup files that directory is: " << WantOperaDirToQstring;
            qDebug() << "*************** This function need to be do! ***************";

            qDebug() << "Backup file path is:" << WantOperaDirToQstring;
            MyWidget::BackupDirAndFileState(WantOperaDirToQstring);

        }
    }else{
        QMessageBox msgBoxTip;
        msgBoxTip.setText("You don't choose directory!");
        msgBoxTip.exec();
    }

    if(reply == QMessageBox::Cancel)
    {
        ;
    }

}

void MyWidget::FindStringInBackFile(char* NeedToFindString, char* ReturnValue)
{
    int index;
    int begin = 0;
    int m, k;
    int FindCheckFlag = 0;
    QFile file(BackupFileStateDirToQstring + "rememberFileState.txt");
    QFileInfo check_file(file);
    // check if file exists and if yes: Is it really a file and no directory?
    if (check_file.exists() && check_file.isFile()) {
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text)){
            QMessageBox msgBoxTip;
            msgBoxTip.setText("Can't find backup file");
            msgBoxTip.exec();
        }


        QTextStream in(&file);

        while (!in.atEnd())
        {
            //QString line = in.readLine(); //specifying number = # of characters
            //lstLine.append( line.split(",") );
            char buf[1024] = {0};

            qint64 lineLength = file.readLine(buf, sizeof(buf));
            qDebug() << "buf is:" << buf;


            if (lineLength != -1){

                qDebug() << "readline by line:" << QString(buf);
                // the line is available in buf
                index = strindexP(buf, NeedToFindString);
                qDebug() << "strindexP rerunt index is:" << index;
                FindCheckFlag = index;
                if(index >= 0){
                    //strncmp(LastRecordTimeP,buf,60);

                    //LastRecordTimeToString = QString(LastRecordTimeP);
                    //qDebug() << "LastRecordTimeToString is:" << LastRecordTimeToString;
                    qDebug() << "*******Find what I want to find:" << QString(buf);
                    size_t LastRecordTimePLength = strlen(buf);
                    qDebug() << "i is:" << index;
                    qDebug() << "LastRecordTimePLength is:" << LastRecordTimePLength;
                    while(buf[begin] != ':'){
                        begin = begin + 1;
                    }
                    for(m = begin+1, k = 0; buf[m] != '\n'; m++, k++){
                        ReturnValue[k] = buf[m];
                    }
                    ReturnValue[k] = '\0';
                    qDebug() << "ReturnValue is:" << QString(ReturnValue);
                    //qDebug() << "LastRecordTime is:" << QString(LastRecordTime);
                    //return ReturnValue;

                    if(FindCheckFlag >=0){
                        break;
                    }
                }


            }
        }
    }else{
        QMessageBox msgBoxTip;
        msgBoxTip.setText("You not haved backup file!");
        msgBoxTip.exec();
    }

    file.close();
}

//Display last time status of backup files date
void MyWidget::on_pushButton_4_clicked()
{
    char NeedToFindTime[] = "Last time backup file state time:";
    char NeedToFindBackFilePath[] = "backup file path:";


    QFile file(BackupFileStateDirToQstring + "rememberFileState.txt");
    QFileInfo check_file(file);
    // check if file exists and if yes: Is it really a file and no directory?
    if (check_file.exists() && check_file.isFile()) {
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text)){
            QMessageBox msgBoxTip;
            msgBoxTip.setText("Can't find open backup file");
            msgBoxTip.exec();
        }else{
            char* ReceiveReturnTime = new char [800];
            char* ReceiveReturnPath = new char [800];
            MyWidget::FindStringInBackFile(NeedToFindTime, ReceiveReturnTime);
            MyWidget::FindStringInBackFile(NeedToFindBackFilePath, ReceiveReturnPath);

            qDebug() << "backup file path is:" << QString(ReceiveReturnPath);

            reply = QMessageBox::information(this, "IMPORTANT NOTICE 3", "Last time backup file path is:\n" + QString(ReceiveReturnPath),
                                          QMessageBox::Ok | QMessageBox::Cancel);
            if (reply == QMessageBox::Ok) {
                    ui->lcdNumber->setDigitCount(25);
                    ui->lcdNumber->display(QString(ReceiveReturnTime));
            }
            if(reply == QMessageBox::Cancel){
                ;
            }

            delete [] ReceiveReturnTime;
            delete [] ReceiveReturnPath;
        }
    }else{
        QMessageBox msgBoxTip;
        msgBoxTip.setText("Can't find backup file");
        msgBoxTip.exec();
    }

}
